--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -445,12 +445,6 @@ struct ath11k_per_peer_tx_stats {
 
 #define ATH11K_FLUSH_TIMEOUT (5 * HZ)
 
-struct ath11k_vdev_stop_delete_status {
-	bool stop_in_progress;
-	bool delete_in_progress;
-	u32  vdev_id;
-};
-
 struct ath11k_coex_info {
 	bool coex_support;
 	u32 pta_num;
@@ -540,7 +534,6 @@ struct ath11k {
 	struct completion install_key_done;
 
 	int last_wmi_vdev_start_status;
-	struct ath11k_vdev_stop_delete_status vdev_stop_delete_status;
 	struct completion vdev_setup_done;
 	struct completion vdev_delete_done;
 
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -444,48 +444,12 @@ struct ath11k *ath11k_mac_get_ar_by_pdev
 	return NULL;
 }
 
-struct ath11k *ath11k_mac_get_ar_vdev_stop_delete_status(struct ath11k_base *ab,
-						     u32 vdev_id)
+struct ath11k *ath11k_mac_get_ar_from_arvif_list(struct ath11k_base *ab, u32 vdev_id)
 {
 	int i;
 	struct ath11k_pdev *pdev;
-	struct ath11k *ar;
-
-	for (i = 0; i < ab->num_radios; i++) {
-		pdev = rcu_dereference(ab->pdevs_active[i]);
-		if (pdev && pdev->ar) {
-			ar = pdev->ar;
-
-			spin_lock_bh(&ar->data_lock);
-			if (ar->vdev_stop_delete_status.stop_in_progress &&
-			    ar->vdev_stop_delete_status.vdev_id == vdev_id) {
-				ar->vdev_stop_delete_status.stop_in_progress = false;
-				spin_unlock_bh(&ar->data_lock);
-				return ar;
-			}
-			if (ar->vdev_stop_delete_status.delete_in_progress &&
-			    ar->vdev_stop_delete_status.vdev_id == vdev_id) {
-				ar->vdev_stop_delete_status.delete_in_progress = false;
-				spin_unlock_bh(&ar->data_lock);
-				return ar;
-			}
-			if (pdev->ar->monitor_vdev_id == vdev_id) {
-				spin_unlock_bh(&ar->data_lock);
-				return pdev->ar;
-			}
-			spin_unlock_bh(&ar->data_lock);
-		}
-	}
-	return NULL;
-}
-
-struct ath11k *ath11k_mac_get_ar_peer_delete_status(struct ath11k_base *ab, u8 *peer_addr,
-						    u32 vdev_id)
-{
-	int i;
-	struct ath11k_pdev *pdev;
-	struct ath11k *ar;
 	struct ath11k_vif *arvif;
+	struct ath11k *ar;
 
 	if (!ab->mac_registered)
 		return NULL;
@@ -496,18 +460,10 @@ struct ath11k *ath11k_mac_get_ar_peer_de
 			ar = pdev->ar;
 
 			spin_lock_bh(&ar->data_lock);
-			if (ether_addr_equal(ar->mac_addr, peer_addr)) {
-				spin_unlock_bh(&ar->data_lock);
-				return ar;
-			} else {
-				arvif = ath11k_mac_get_arvif(pdev->ar, vdev_id);
-                        	if (arvif) {
-					spin_unlock_bh(&ar->data_lock);
-                                	return arvif->ar;
-				}
-				if (pdev->ar->monitor_vdev_id == vdev_id) {
+			list_for_each_entry(arvif, &ar->arvifs, list) {
+				if (arvif->vdev_id == vdev_id) {
 					spin_unlock_bh(&ar->data_lock);
-					return pdev->ar;
+					return arvif->ar;
 				}
 			}
 			spin_unlock_bh(&ar->data_lock);
@@ -694,28 +650,6 @@ void ath11k_mac_peer_cleanup_all(struct
 	ar->num_stations = 0;
 }
 
-int ath11k_wait_for_peer_delete_done(struct ath11k *ar, u32 vdev_id,
-					    const u8 *addr)
-{
-	int ret;
-	unsigned long time_left;
-
-	ret = ath11k_wait_for_peer_deleted(ar, vdev_id, addr);
-	if(ret) {
-		ath11k_warn(ar->ab, "failed wait for peer deleted");
-		return ret;
-	}
-
-	time_left = wait_for_completion_timeout(&ar->peer_delete_done,
-						3 * HZ);
-	if(time_left == 0) {
-		ath11k_warn(ar->ab, "Timeout in receiving peer delete response\n");
-		return -ETIMEDOUT;
-	}
-
-	return 0;
-}
-
 static int ath11k_mac_op_config(struct ieee80211_hw *hw, u32 changed)
 {
 	struct ath11k *ar = hw->priv;
@@ -4375,12 +4309,6 @@ static void ath11k_mac_op_remove_interfa
 	ath11k_dbg(ab, ATH11K_DBG_MAC, "mac remove interface (vdev %d)\n",
 		   arvif->vdev_id);
 
-	spin_lock_bh(&ar->data_lock);
-	list_del(&arvif->list);
-	ar->vdev_stop_delete_status.delete_in_progress = true;
-	ar->vdev_stop_delete_status.vdev_id = arvif->vdev_id;
-	spin_unlock_bh(&ar->data_lock);
-
 	if (arvif->vdev_type == WMI_VDEV_TYPE_AP) {
 		ret = ath11k_peer_delete(ar, arvif->vdev_id, vif->addr);
 		if (ret)
@@ -4392,16 +4320,13 @@ static void ath11k_mac_op_remove_interfa
 	if (ret) {
 		ath11k_warn(ab, "failed to delete WMI vdev %d: %d\n",
 			    arvif->vdev_id, ret);
-		ar->vdev_stop_delete_status.delete_in_progress = false;
 		goto err_vdev_del;
 	}
 
 	time_left = wait_for_completion_timeout(&ar->vdev_delete_done,
 						ATH11K_VDEV_DELETE_TIMEOUT_HZ);
-	if (time_left == 0) {
+	if (time_left == 0)
 		ath11k_warn(ab, "Timeout in receiving vdev delete response\n");
-		ar->vdev_stop_delete_status.delete_in_progress = false;
-	}
 	else {
 		ab->free_vdev_map |= 1LL << (arvif->vdev_id);
 		ar->num_created_vdevs--;
@@ -4411,6 +4336,10 @@ static void ath11k_mac_op_remove_interfa
 		ar->monitor_vdev_id = -1;
 
 err_vdev_del:
+	spin_lock_bh(&ar->data_lock);
+	list_del(&arvif->list);
+	spin_unlock_bh(&ar->data_lock);
+
 	ath11k_peer_cleanup(ar, arvif->vdev_id);
 
 	idr_for_each(&ar->txmgmt_idr,
@@ -4689,13 +4618,6 @@ static int ath11k_mac_vdev_stop(struct a
 	reinit_completion(&ar->vdev_setup_done);
 	reinit_completion(&ar->vdev_delete_done);
 
-	spin_lock_bh(&ar->data_lock);
-
-	ar->vdev_stop_delete_status.stop_in_progress = true;
-	ar->vdev_stop_delete_status.vdev_id = arvif->vdev_id;
-
-	spin_unlock_bh(&ar->data_lock);
-
 	ret = ath11k_wmi_vdev_stop(ar, arvif->vdev_id);
 	if (ret) {
 		ath11k_warn(ar->ab, "failed to stop WMI vdev %i: %d\n",
@@ -4722,10 +4644,6 @@ static int ath11k_mac_vdev_stop(struct a
 
 	return 0;
 err:
-	spin_lock_bh(&ar->data_lock);
-	ar->vdev_stop_delete_status.stop_in_progress = false;
-	spin_unlock_bh(&ar->data_lock);
-
 	return ret;
 }
 
@@ -5832,7 +5750,6 @@ static int ath11k_mac_monitor_vdev_delet
 						ATH11K_VDEV_DELETE_TIMEOUT_HZ);
 	if (time_left == 0) {
 		ath11k_warn(ar->ab, "Timeout in receiving vdev delete response\n");
-		ar->vdev_stop_delete_status.delete_in_progress = false;
 	} else {
 		ar->ab->free_vdev_map |= 1LL << (ar->monitor_vdev_id);
 		ar->num_created_vdevs--;
--- a/drivers/net/wireless/ath/ath11k/mac.h
+++ b/drivers/net/wireless/ath/ath11k/mac.h
@@ -187,15 +187,10 @@ int ath11k_mac_coex_config(struct ath11k
 			   int coex, u32 wlan_prio_mask, u8 wlan_weight);
 struct ath11k *ath11k_mac_get_ar_by_vdev_id(struct ath11k_base *ab, u32 vdev_id);
 struct ath11k *ath11k_mac_get_ar_by_pdev_id(struct ath11k_base *ab, u32 pdev_id);
-struct ath11k *ath11k_mac_get_ar_vdev_stop_status(struct ath11k_base *ab,
-						  u32 vdev_id);
-struct ath11k *ath11k_mac_get_ar_vdev_stop_delete_status(struct ath11k_base *ab,
-						     u32 vdev_id);
+struct ath11k *ath11k_mac_get_ar_from_arvif_list(struct ath11k_base *ab, u32 vdev_id);
 void ath11k_mac_drain_tx(struct ath11k *ar);
 void ath11k_mac_peer_cleanup_all(struct ath11k *ar);
 int ath11k_mac_tx_mgmt_pending_free(int buf_id, void *skb, void *ctx);
 u8 ath11k_mac_bw_to_mac80211_bw(u8 bw);
-struct ath11k *ath11k_mac_get_ar_peer_delete_status(struct ath11k_base *ab, u8 *peer_addr,
-						    u32 vdev_id);
 int ath11k_mac_monitor_recalc(struct ath11k *ar, bool needed);
 #endif
--- a/drivers/net/wireless/ath/ath11k/peer.c
+++ b/drivers/net/wireless/ath/ath11k/peer.c
@@ -153,11 +153,33 @@ void ath11k_peer_cleanup(struct ath11k *
 	spin_unlock_bh(&ab->base_lock);
 }
 
-int ath11k_wait_for_peer_deleted(struct ath11k *ar, int vdev_id, const u8 *addr)
+static int ath11k_wait_for_peer_deleted(struct ath11k *ar, int vdev_id, const u8 *addr)
 {
 	return ath11k_wait_for_peer_common(ar->ab, vdev_id, addr, false);
 }
 
+int ath11k_wait_for_peer_delete_done(struct ath11k *ar, u32 vdev_id,
+				     const u8 *addr)
+{
+	int ret;
+	unsigned long time_left;
+
+	ret = ath11k_wait_for_peer_deleted(ar, vdev_id, addr);
+	if (ret) {
+		ath11k_warn(ar->ab, "failed wait for peer deleted");
+		return ret;
+	}
+
+	time_left = wait_for_completion_timeout(&ar->peer_delete_done,
+						3 * HZ);
+	if (time_left == 0) {
+		ath11k_warn(ar->ab, "Timeout in receiving peer delete response\n");
+		return -ETIMEDOUT;
+	}
+
+	return 0;
+}
+
 int ath11k_peer_delete(struct ath11k *ar, u32 vdev_id, u8 *addr)
 {
 	int ret;
--- a/drivers/net/wireless/ath/ath11k/peer.h
+++ b/drivers/net/wireless/ath/ath11k/peer.h
@@ -31,7 +31,6 @@ void ath11k_peer_cleanup(struct ath11k *
 int ath11k_peer_delete(struct ath11k *ar, u32 vdev_id, u8 *addr);
 int ath11k_peer_create(struct ath11k *ar, struct ath11k_vif *arvif,
 		       struct ieee80211_sta *sta, struct peer_create_params *param);
-int ath11k_wait_for_peer_deleted(struct ath11k *ar, int vdev_id, const u8 *addr);
 int ath11k_wait_for_peer_delete_done(struct ath11k *ar, u32 vdev_id, const u8 *addr);
 
 #endif /* _PEER_H_ */
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -5283,8 +5283,7 @@ static void ath11k_peer_delete_resp_even
 	}
 
 	rcu_read_lock();
-	ar = ath11k_mac_get_ar_peer_delete_status(ab, peer_del_resp.peer_macaddr.addr,
-						  peer_del_resp.vdev_id);
+	ar = ath11k_mac_get_ar_from_arvif_list(ab, peer_del_resp.vdev_id);
 	if (!ar) {
 		ath11k_warn(ab, "invalid vdev id in peer delete resp ev %d",
 			    peer_del_resp.vdev_id);
@@ -5304,7 +5303,7 @@ static void ath11k_peer_delete_resp_even
 static void ath11k_vdev_delete_resp_event(struct ath11k_base *ab, struct sk_buff *skb)
 {
 	struct ath11k *ar;
-	u32 vdev_id;
+	u32 vdev_id = 0;
 
 	if (ath11k_pull_vdev_del_resp_ev(ab, skb, &vdev_id) != 0) {
 		ath11k_warn(ab, "failed to extract vdev delete resp");
@@ -5312,7 +5311,7 @@ static void ath11k_vdev_delete_resp_even
 	}
 
 	rcu_read_lock();
-	ar = ath11k_mac_get_ar_vdev_stop_delete_status(ab, vdev_id);
+	ar = ath11k_mac_get_ar_from_arvif_list(ab, vdev_id);
 	if (!ar) {
 		ath11k_warn(ab, "invalid vdev id in vdev delete resp ev %d",
 			    vdev_id);
@@ -5403,7 +5402,7 @@ static void ath11k_vdev_stopped_event(st
 	}
 
 	rcu_read_lock();
-	ar = ath11k_mac_get_ar_vdev_stop_delete_status(ab, vdev_id);
+	ar = ath11k_mac_get_ar_from_arvif_list(ab, vdev_id);
 	if (!ar) {
 		ath11k_warn(ab, "invalid vdev id in vdev stopped ev %d",
 			    vdev_id);
