Author: Ken Zhu <guigenz@codeaurora.org>
Date:   Thu Feb 25 16:19:14 2021 -0800

    odhcpd: prevent periodic routing table flush and sending NS continuously

    When the NDP relay is enabled, there are two problems.

    odhcpd periodically send ping packet.It will setup route to send ping
    packet and later remove the route entry.Each ping triggers some
    listeners to do the flush accordingly.

    Keep sending NS once odhcpd reloads. Change it to only send NS one time.

Change-Id: I39b196abc7dcb8ea87647ebadd9163e54b5e76d5
Signed-off-by: Ken Zhu <guigenz@codeaurora.org>

diff -Nur a/src/ndp.c odhcpd-2016-10-09/src/ndp.c
--- a/src/ndp.c	2021-05-07 16:56:36.098922860 -0700
+++ odhcpd-2016-10-09/src/ndp.c	2021-05-07 17:00:42.613164231 -0700
@@ -41,7 +41,7 @@
 static void catch_rtnetlink(int error);
 
 static uint32_t rtnl_seqid = 0;
-static int ping_socket = -1;
+static int ns_socket = -1;
 static struct odhcpd_event rtnl_event = {{.fd = -1}, handle_rtnetlink, catch_rtnetlink};
 
 
@@ -81,24 +81,24 @@
 	odhcpd_register(&rtnl_event);
 
 	// Open ICMPv6 socket
-	ping_socket = socket(AF_INET6, SOCK_RAW | SOCK_CLOEXEC, IPPROTO_ICMPV6);
-	if (ping_socket < 0) {
+	ns_socket = socket(AF_INET6, SOCK_RAW | SOCK_CLOEXEC, IPPROTO_ICMPV6);
+	if (ns_socket < 0) {
 		syslog(LOG_ERR, "Unable to open raw socket: %s", strerror(errno));
 			return -1;
 	}
 
 	val = 2;
-	setsockopt(ping_socket, IPPROTO_RAW, IPV6_CHECKSUM, &val, sizeof(val));
+	setsockopt(ns_socket, IPPROTO_RAW, IPV6_CHECKSUM, &val, sizeof(val));
 
 	// This is required by RFC 4861
 	val = 255;
-	setsockopt(ping_socket, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, &val, sizeof(val));
-	setsockopt(ping_socket, IPPROTO_IPV6, IPV6_UNICAST_HOPS, &val, sizeof(val));
+	setsockopt(ns_socket, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, &val, sizeof(val));
+	setsockopt(ns_socket, IPPROTO_IPV6, IPV6_UNICAST_HOPS, &val, sizeof(val));
 
 	// Filter all packages, we only want to send
 	struct icmp6_filter filt;
 	ICMP6_FILTER_SETBLOCKALL(&filt);
-	setsockopt(ping_socket, IPPROTO_ICMPV6, ICMP6_FILTER, &filt, sizeof(filt));
+	setsockopt(ns_socket, IPPROTO_ICMPV6, ICMP6_FILTER, &filt, sizeof(filt));
 
 
 	// Netlink socket, continued...
@@ -212,21 +212,52 @@
 }
 
 
-// Send an ICMP-ECHO. This is less for actually pinging but for the
-// neighbor cache to be kept up-to-date.
-static void ping6(struct in6_addr *addr,
+// Send Neighbour solicitation for neighbor cache to be kept up-to-date.
+static void send_ns(struct in6_addr *addr,
 		const struct interface *iface)
 {
-	struct sockaddr_in6 dest = {AF_INET6, 0, 0, *addr, iface->ifindex};
-	struct icmp6_hdr echo = {.icmp6_type = ICMP6_ECHO_REQUEST};
-	struct iovec iov = {&echo, sizeof(echo)};
-
-	odhcpd_setup_route(addr, 128, iface, NULL, 128, true);
-	odhcpd_send(ping_socket, &dest, &iov, 1, iface);
-	odhcpd_setup_route(addr, 128, iface, NULL, 128, false);
+	struct solicit_packet {
+		struct nd_neighbor_solicit nh;
+		struct nd_opt_hdr opt;
+		uint8_t hwaddr[6];
+	} __packed ns;
+	struct in6_addr daddr = {/*0*/};
+
+	memset(&ns, 0, sizeof(ns));
+
+	ns.nh.nd_ns_type   = ND_NEIGHBOR_SOLICIT;
+	memcpy(&ns.nh.nd_ns_target, addr, sizeof(struct in6_addr));
+
+	ns.opt.nd_opt_type = ND_OPT_SOURCE_LINKADDR;
+	ns.opt.nd_opt_len  = 1;
+
+	if (odhcpd_get_mac(iface, ns.hwaddr)) {
+		return;
+	}
+
+	/*
+	 * NS detination address pattern: ff02::1:ff00:0000, replacing
+	 * the last 24bits with target addresss's last 24 bits
+	 */
+	daddr.s6_addr[0]=0xff;
+	daddr.s6_addr[1]=0x02;
+	daddr.s6_addr[11] = 0x1;
+	daddr.s6_addr[12] = 0xff;
+	daddr.s6_addr[13] = addr->s6_addr[13];
+	daddr.s6_addr[14] = addr->s6_addr[14];
+	daddr.s6_addr[15] = addr->s6_addr[15];
+
+
+	struct sockaddr_in6 dest = {AF_INET6, 0, 0, daddr, iface->ifindex};
+
+	struct iovec iov = {&ns, sizeof(ns)};
+
+	odhcpd_send(ns_socket, &dest, &iov, 1, iface);
+
 }
 
 
+
 // Handle solicitations
 static void handle_solicit(void *addr, void *data, size_t len,
 		struct interface *iface, _unused void *dest)
@@ -264,7 +295,7 @@
 	list_for_each_entry(c, &interfaces, head)
 		if (iface->ndp == RELAYD_RELAY && iface != c &&
 				(ns_is_dad || !c->external))
-			ping6(&req->nd_ns_target, c);
+			send_ns(&req->nd_ns_target, c);
 }
 
 // Use rtnetlink to modify kernel routes
@@ -452,7 +483,7 @@
 						list_for_each_entry(c, &interfaces, head)
 							if (iface->ndp == RELAYD_RELAY && iface != c &&
 									!c->external == false)
-								ping6(addr, c);
+								send_ns(addr, c);
 					}
 				} else {
 					struct interface *c;
diff -Nur a/src/odhcpd.h odhcpd-2016-10-09/src/odhcpd.h
--- a/src/odhcpd.h	2021-05-07 16:56:36.098922860 -0700
+++ odhcpd-2016-10-09/src/odhcpd.h	2021-05-07 16:57:00.002752333 -0700
@@ -132,6 +132,7 @@
 	enum odhcpd_mode dhcpv4;
 
 	// Config
+	bool first_rs_sent;
 	bool inuse;
 	bool external;
 	bool master;
diff -Nur a/src/router.c odhcpd-2016-10-09/src/router.c
--- a/src/router.c	2021-05-07 16:56:36.098922860 -0700
+++ odhcpd-2016-10-09/src/router.c	2021-05-07 16:57:00.002752333 -0700
@@ -113,7 +113,8 @@
 	} else {
 		void *mreq = &all_routers;
 
-		if (iface->ra == RELAYD_RELAY && iface->master) {
+		if (iface->ra == RELAYD_RELAY && iface->master && !iface->first_rs_sent) {
+			iface->first_rs_sent = 1;
 			mreq = &all_nodes;
 			forward_router_solicitation(iface);
 		} else if (iface->ra == RELAYD_SERVER && !iface->master) {
